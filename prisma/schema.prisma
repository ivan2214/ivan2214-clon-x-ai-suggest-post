datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model User {
  id             String         @id @default(cuid())
  email          String?        @unique
  name           String?
  username       String?
  emailVerified  DateTime?      @map("email_verified")
  hashedPassword String?
  image          String?
  accounts       Account[]
  tweets         Tweet[]
  replies        ReplyComment[]

  @@map("users")
}

model Tweet {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  mediaUrl    String?
  description String?

  authorId    String
  author      User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  retweets    Int            @default(0)
  likes       Int            @default(0)
  plays       Int            @default(0)
  replies     ReplyComment[]

  @@index([authorId])
}

model Comment {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())
  comment   String?
  mediaUrl  String?
  likes     Int            @default(0)
  replies   ReplyComment[]

  @@map("comments")
}

model ReplyComment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  commentId String
  authorId  String
  tweetId   String?

  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  author  User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tweet   Tweet?   @relation(fields: [tweetId], references: [id])

  @@index([commentId])
  @@index([authorId])
  @@index([tweetId])
}
