datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")

  name     String
  username String @unique

  bio            String?
  hashedPassword String?
  image          String?

  accounts Account[]
  tweets   Tweet[]
  comments Comment[]
  replies  ReplyComment[]

  @@map("users")
}

model Tweet {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  description String?

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  retweets  Int @default(0)
  likes     Int @default(0)
  plays     Int @default(0)
  bookmarks Int @default(0)
  shares    Int @default(0)

  mediaUrl MediaUrl[]
  comments Comment[]

  @@index([authorId])
}

model MediaUrl {
  id  String @id @default(cuid())
  url String

  tweet   Tweet?  @relation(fields: [tweetId], references: [id])
  tweetId String?

  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?

  replyComment   ReplyComment? @relation(fields: [replyCommentId], references: [id])
  replyCommentId String?

  @@index([tweetId])
  @@index([commentId])
  @@index([replyCommentId])
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  likes     Int      @default(0)
  retweets  Int      @default(0)
  bookmarks Int      @default(0)
  shares    Int      @default(0)
  plays     Int      @default(0)

  content String?

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  tweet   Tweet  @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId String

  replies   ReplyComment[]
  mediaUrls MediaUrl[]

  @@index([authorId])
  @@index([tweetId])
  @@map("comments")
}

model ReplyComment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  likes     Int      @default(0)

  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  content   String?
  mediaUrls MediaUrl[]

  @@index([commentId])
  @@index([authorId])
}
