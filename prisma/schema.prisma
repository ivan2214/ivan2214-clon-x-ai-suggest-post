datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")

  name     String
  username String @unique

  bio            String?
  hashedPassword String?
  image          String?

  accounts      Account[]
  tweetsOnUsers TweetsOnUsers[]
  tweets        Tweet[]         @relation("UserTweets")

  @@map("users")
}

model Tweet {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId String

  author   User   @relation("UserTweets", fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  retweets  Int @default(0)
  likes     Int @default(0)
  plays     Int @default(0)
  bookmarks Int @default(0)
  shares    Int @default(0)

  comments      TweetsOnUsers[] @relation("TweetComments")
  tweetsOnUsers TweetsOnUsers[] @relation("TweetUsers")

  @@index([authorId])
  @@index([contentId])
}

model Content {
  id String @id @default(cuid())

  text String?

  mediaUrls MediaUrl[]
  tweets    Tweet[]

  @@map("content")
}

model MediaUrl {
  id  String @id @default(cuid())
  url String

  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId String

  @@index([contentId])
  @@map("media_urls")
}

model TweetsOnUsers {
  id String @id @default(cuid())

  createdAt DateTime @default(now())

  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  tweet    Tweet   @relation("TweetUsers", fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId  String
  parent   Tweet?  @relation("TweetComments", fields: [parentId], references: [id], onDelete: Cascade)
  parentId String? // Esto se usa para rastrear si el tweet es una respuesta a otro tweet (comentario)

  @@index([userId])
  @@index([tweetId])
  @@index([parentId])
  @@map("tweets_on_users")
}
